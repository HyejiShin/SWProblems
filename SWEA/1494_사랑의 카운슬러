/*
[풀이]
"벡터의 합"의 크기가 최소인 경우를 출력하는 문제이다.
"벡터의 합"이라는건 (x2-x1 , y2-y1)의 합이고, 모든 쌍이 존재하므로 출발점 n/2개, 도착점 n/2개로 볼 수 있다.

즉 벡터의 합은 (도착점의 x좌표의 합 - 시작점의 x좌표의 합 , 도착점의 y좌표의 합 - 시작점의 y좌표의 합) 으로 나타난다.
n개의 입력값을 출발점과 도착점으로 나누어 벡터의 합을 구한 뒤 최솟값으로 최신화 해주면 해결된다.
*/

#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <climits>
#include <cstring>

using namespace std;

long long ans = LLONG_MAX;
int T, N;
int check[21];
struct Info {
	long long x, y;
};
vector<Info> worm;

void dfs(int idx, int cnt) {
	if (cnt == N / 2) {
		long long xx = 0, yy = 0;
		for (int i = 0; i < N; i++) {
			if (check[i] == 1) {
				xx += worm[i].x;
				yy += worm[i].y;
			}
			else {
				xx -= worm[i].x;
				yy -= worm[i].y;
			}
		}
		ans = min(ans, xx * xx + yy * yy);
		return;
	}

	for (int i = idx; i < N; i++) {
		if (check[i] == 0) {
			check[i] = 1;
			dfs(i + 1, cnt + 1);
			check[i] = 0;
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin >> T;
	for (int tc = 1; tc <= T; tc++) {
		cin >> N;
		worm.clear();
		memset(check, 0, sizeof(check));
		ans = LLONG_MAX;
		for (int i = 0; i < N; i++) {
			long long x, y;
			cin >> x >> y;
			worm.push_back({ x, y });
		}

		dfs(0, 0);

		cout << "#" << tc << ' ' << ans << '\n';
	}
	return 0;
}