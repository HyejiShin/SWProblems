#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

int T, N, M, K, A, B;
int a[10][3], b[10][3], c[1001][3];

int main() {
	ios::sync_with_stdio(false);

	cin >> T;
	for (int tc = 1; tc <= T; tc++) {
		cin >> N >> M >> K >> A >> B;

		vector<int> fin;
		queue<int> Await, Bwait;
		memset(a, 0, sizeof(int) * 10 * 3);
		memset(b, 0, sizeof(int) * 10 * 3);
		memset(c, 0, sizeof(int) * 1001 * 3);

		// 입력
		for (int i = 1; i <= N; i++) {
			cin >> a[i][0];
		}
		for (int i = 1; i <= M; i++) {
			cin >> b[i][0];
		}
		for (int i = 1; i <= K; i++) {
			cin >> c[i][0];
		}

		int t = 0;
		while (fin.size() < K) {
		
			//도착 -> 접수 줄 섬
			for (int i = 1; i <= K; i++) {
				if (t == c[i][0]) {
					Await.push(i);
				}
			}

			// 접수 확인
			for (int i = 1; i <= N; i++) {
				if (a[i][1] == 0 && a[i][2] == 0) {
					if (!Await.empty() && Await.size() > 0) {
						a[i][1] = a[i][0] - 1;
						a[i][2] = Await.front();
						c[a[i][2]][1] = i;
						Await.pop();
						if (a[i][1] == 0) {
							Bwait.push(a[i][2]);
							a[i][2] = 0;
						}
					}
				}
				else if(a[i][1] > 0) {
					a[i][1] -= 1;
					if (a[i][1] == 0) {
						Bwait.push(a[i][2]);
						a[i][2] = 0;
					}
				}
			}

			// 정비
			for (int i = 1; i <= M; i++) {
				if (b[i][1] == 0 && b[i][2] == 0) {
					if (!Bwait.empty() && Bwait.size() > 0) {
						b[i][1] = b[i][0] - 1;
						b[i][2] = Bwait.front();
						c[b[i][2]][2] = i;
						Bwait.pop();
						if (b[i][1] == 0) {
							fin.push_back(b[i][2]);
							b[i][2] = 0;
						}
					}
				}
				else {
					b[i][1] -= 1;
					if (b[i][1] == 0) {
						fin.push_back(b[i][2]);
						b[i][2] = 0;
					}
				}
			}
			t++;
		}

		int ans = 0;
		// A, B같은 거 계산
		for (int i = 1; i <= K; i++) {
			if (c[i][1] == A && c[i][2] == B)
				ans += i;
		}
		if (ans == 0)
			ans = -1;
		cout << "#" << tc << ' ' << ans << '\n';
	}
	return 0;
}