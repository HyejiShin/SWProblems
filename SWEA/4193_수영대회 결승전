#include <iostream>
#include <cstring>

using namespace std;

int T, N, sx, sy, ex, ey;
int arr[16][16], check[16][16];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

void dfs(int x, int y, int time) {
	check[x][y] = time;

	if (x == ex && y == ey) {
		return;
	}

	for (int d = 0; d < 4; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];

		if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] == 1)
			continue;

		if (arr[nx][ny] == 0 && (check[nx][ny] == -1 || check[nx][ny] > time + 1))
			dfs(nx, ny, time + 1);
		else if (arr[nx][ny] == 2 && (check[nx][ny] == -1 || check[nx][ny] > time + 3 - (time % 3))) {
			dfs(nx, ny, time + 3 - (time%3));
		}
	}
}

int main() {
	ios::sync_with_stdio(false);

	cin >> T;
	
	for (int tc = 1; tc <= T; tc++) {
		//cout << "for in\n";
		memset(arr, 0, sizeof(int) * 16 * 16);
		memset(check, 0, sizeof(int) * 16 * 16);
		//cout << "after memset\n";
		cin >> N;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				cin >> arr[i][j];
				check[i][j] = -1;
			}
		}

		cin >> sx >> sy;
		cin >> ex >> ey;

		dfs(sx, sy, 0);
			
		cout << "#" << tc << ' ' << check[ex][ey] << '\n';
	}
	return 0;
}