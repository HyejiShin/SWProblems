#include <iostream>
#include <queue>

using namespace std;

struct Tree {
	priority_queue<int, vector<int>, greater<int>> pq;
};
int N, M, K, x, y, z;
int A[11][11], nutri[11][11];
Tree tree[11][11];
int dx[8] = { -1, -1, -1, 0, 1, 1, 1, 0 }, dy[8] = { -1, 0, 1, 1, 1, 0, -1, -1 };

void addTree(int x, int y) {
	for (int d = 0; d < 8; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 1 || nx > N || ny < 1 || ny > N)
			continue;
		tree[nx][ny].pq.push(1);
	}
}

int main() {
	ios::sync_with_stdio(false);

	cin >> N >> M >> K;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> A[i][j];
			nutri[i][j] = 5;
		}
	}
	for (int i = 0; i < M; i++) {
		cin >> x >> y >> z;
		tree[x][y].pq.push(z);
	}

	while (K--) {
		// 봄 & 여름
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				// 봄
				int s = tree[i][j].pq.size();
				int plus = 0;
				queue<int> q;
				for (int t = 0; t < s; t++) {
					if (nutri[i][j] >= tree[i][j].pq.top()) {
						nutri[i][j] -= tree[i][j].pq.top();
						int age = tree[i][j].pq.top();
						tree[i][j].pq.pop();
						q.push(age + 1);
					}
					else {
						plus += tree[i][j].pq.top() / 2;
						tree[i][j].pq.pop();
					}
				}
				while (!q.empty()) {
					tree[i][j].pq.push(q.front());
					q.pop();
				}
				// 여름
				nutri[i][j] += plus;
			}
		}
	
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				// 가을
				queue<int> q;
				while (!tree[i][j].pq.empty()) {
					int age = tree[i][j].pq.top();
					if (age % 5 == 0)
						addTree(i, j);
					tree[i][j].pq.pop();
					q.push(age);
				}
				while (!q.empty()) {
					tree[i][j].pq.push(q.front());
					q.pop();
				}
				// 겨울
				nutri[i][j] += A[i][j];

			}
		}
	}

	int ans = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			ans += tree[i][j].pq.size();
		}
	}
	cout << ans << '\n';
	return 0;
}