// https://www.acmicpc.net/problem/2169
// 2169_로봇 조종하기

#include <iostream>
#include <queue>
#include <utility>
#include <algorithm>

using namespace std;

int N, M, ans = 0;
int arr[1001][1001], check[1001][1001];
int d[1001][1001];
queue < pair<int, int> > q;
int dx[3] = { 0, 1, 0 };
int dy[3] = { 1, 0, -1 };

int main() {
	ios::sync_with_stdio(false);

	cin >> N >> M;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> arr[i][j];
		}
	}

	// 맨 첫번째 줄
	d[1][1] = arr[1][1];
	for (int j = 2; j <= M; j++)
		d[1][j] = d[1][j - 1] + arr[1][j];

	// 1. 위에서 내려오거나, 2. 왼쪽, 3. 오른쪽
	// 두 방향으로 비교해 주어야 함
	for (int i = 2; i <= N; i++) {
		int temp[1001][2] = { 0, };
		// 왼 -> 오
		temp[1][0] = d[i-1][1] + arr[i][1];
		for (int j = 2; j <= M; j++) {
			temp[j][0] = max(d[i - 1][j], temp[j - 1][0]) + arr[i][j];
		}

		// 오 -> 왼
		temp[M][1] = d[i - 1][M] + arr[i][M];
		for (int j = M - 1; j >= 1; j--) {
			temp[j][1] = max(d[i - 1][j], temp[j + 1][1]) + arr[i][j];
		}

		for (int j = 1; j <= M; j++) {
			d[i][j] = max(temp[j][0], temp[j][1]);
		}
	}

	// 출력 -- 확인
	//for (int i = 1; i <= N; i++) {
	//	for (int j = 1; j <= M; j++) {
	//		cout << d[i][j] << ' ';
	//	}
	//	cout << '\n';
	//}

	cout << d[N][M] << '\n';
	return 0;
}