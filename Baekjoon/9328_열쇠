#include <iostream>
#include <queue>
#include <cstring>
#include <algorithm>
#include <string>

using namespace std;

struct Info{
	int x, y;
};

int T, H, W, ans;
char arr[105][105];
int check[105][105];
int key[27];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

void solve() {
	queue<Info> q;
	q.push({ 0, 0 });
	check[0][0] = 1;
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		q.pop();

		for (int d = 0; d < 4; d++) {
			int nx = x + dx[d];
			int ny = y + dy[d];
			if (nx < 0 || nx > H + 1 || ny < 0 || ny > W + 1 || arr[nx][ny] == '*' || check[nx][ny] == 1)
				continue;
			if (arr[nx][ny] == '.') {
				check[nx][ny] = 1;
				q.push({ nx, ny });
			}
			if (arr[nx][ny] == '$') {
				ans++;
				arr[nx][ny] = '.';
				check[nx][ny] = 1;
				q.push({ nx, ny });
			}
			
			// key
			if (arr[nx][ny] >= 'a' && arr[nx][ny] <= 'z') {
				if (key[arr[nx][ny] - 'a'] == 0) {
					key[arr[nx][ny] - 'a'] = 1;
					memset(check, 0, sizeof(int) * 105 * 105);
					check[nx][ny] = 1;
					q.push({ nx, ny });
				}
				arr[nx][ny] = '.';
			}

			// door
			if (arr[nx][ny] >= 'A' && arr[nx][ny] <= 'Z') {
				if (key[arr[nx][ny] - 'A'] == 1) {
					arr[nx][ny] = '.';
					check[nx][ny] = 1;
					q.push({ nx, ny });
				}
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin >> T;

	for (int tc = 1; tc <= T; tc++) {
		ans = 0;
		memset(check, 0, sizeof(int) * 105 * 105);
		memset(key, 0, sizeof(key));

		// 입력
		cin >> H >> W;
		for (int i = 0; i <= H+1; i++) {
			for (int j = 0; j <= W + 1; j++) {
				if (i == 0 || j == 0 || i == H + 1 || j == W + 1)
					arr[i][j] = '.';
				else {
					cin >> arr[i][j];
				}
			}
		}
		string s;
		cin >> s;
		for (int i = 0; i < s.length(); i++) {
			key[s[i] - 'a'] = 1;
		}
		solve();
		cout << ans << '\n';
	}


	return 0;
}