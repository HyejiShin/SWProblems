#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>

using namespace std;

struct Info {
	int x, y, dd, cnt;
};
int N, bd, ed, sx, sy, ex, ey, ans; // 0: 가로, 1:세로
vector<pair<int, int> > B, E;
char arr[51][51];
int visit[51][51][2];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

void solve() {
	queue<Info> q;
	q.push({ sx, sy, bd, 0 });
	visit[sx][sy][bd] = 1;
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int dd = q.front().dd;
		int cnt = q.front().cnt;
		q.pop();
		
		//종료 조건
		if (x == ex && y == ey && dd == ed) {
			ans = cnt;
			break;
		}

		// 움직임
		if (dd == 0) { // 가로
			for (int d = 0; d < 4; d++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] == '1' || visit[nx][ny][dd] == 1)
					continue;
				if (d == 0) {
					if (arr[nx][ny + 1] == '1' || ny + 1 >= N)
						continue;
				}
				else if (d == 1) {
					if (arr[nx][ny - 1] == '1' || arr[nx][ny + 1] == '1')
						continue;
				}
				else if (d == 2) {
					if (arr[nx][ny - 1] == '1' || ny - 1 < 0)
						continue;
				}
				else if (d == 3) {
					if (arr[nx][ny - 1] == '1' || arr[nx][ny + 1] == '1' )
						continue;
				}
				visit[nx][ny][dd] = 1;
				q.push({ nx, ny, dd, cnt + 1 });
			}
			if (x - 1 < 0 || x + 1 >= N || y - 1 < 0 || y + 1 >= N || visit[x][y][1] == 1)
				continue;
			bool flag = true;
			for (int i = x - 1; i <= x + 1; i++) {
				for (int j = y - 1; j <= y + 1; j++) {
					if (arr[i][j] == '1')
						flag = false;
				}
			}
			if (flag) {
				visit[x][y][1] = 1;
				q.push({ x, y, 1, cnt + 1 });
			}
		}

		else if (dd == 1) { // 세로
			for (int d = 0; d < 4; d++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] == '1' || visit[nx][ny][dd] == 1)
					continue;
				if (d == 0) {
					if (arr[nx - 1][ny] == '1' || arr[nx +  1][ny] == '1')
						continue;
				}
				else if (d == 1) {
					if (arr[nx + 1][ny] == '1' || nx + 1 >= N)
						continue;
				}
				else if (d == 2) {
					if (arr[nx - 1][ny] == '1' || arr[nx + 1][ny] == '1')
						continue;
				}
				else if (d == 3) {
					if (arr[nx - 1][ny] == '1' || nx - 1 < 0)
						continue;
				}
				visit[nx][ny][dd] = 1;
				q.push({ nx, ny, dd, cnt + 1 });
			}
			if (x - 1 < 0 || x + 1 >= N || y - 1 < 0 || y + 1 >= N || visit[x][y][0] == 1)
				continue;
			bool flag = true;
			for (int i = x - 1; i <= x + 1; i++) {
				for (int j = y - 1; j <= y + 1; j++) {
					if (arr[i][j] == '1')
						flag = false;
				}
			}
			if (flag) {
				visit[x][y][0] = 1;
				q.push({ x, y, 0, cnt + 1 });
			}
		}
		
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 'B') {
				arr[i][j] = '0';
				B.push_back({ i, j });
			}
			else if (arr[i][j] == 'E') {
				arr[i][j] = '0';
				E.push_back({ i, j });
			}
		}
	}

	sort(B.begin(), B.end());
	sort(E.begin(), E.end());

	if (B[0].first == B[1].first)
		bd = 0;
	else if (B[0].second == B[1].second) 
		bd = 1;

	if (E[0].first == E[1].first)
		ed = 0;
	else if (E[0].second == E[1].second)
		ed = 1;

	sx = B[1].first; sy = B[1].second;
	ex = E[1].first; ey = E[1].second;

	solve();

	cout << ans << endl;
	return 0;
}