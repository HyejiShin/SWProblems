// https://www.acmicpc.net/problem/16234
// 16234_인구이동

// 인구이동이 없을 때까지
#include <iostream>
#include <cstring>
#include <vector>
#include <cmath>

using namespace std;

struct Info {
	int x, y, num;
};

int N, L, R, sum;
int arr[51][51], check[51][51];
int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };
vector<Info> info;

void checkUnion(int x, int y, int cnt) {
	for (int d = 0; d < 4; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N || check[nx][ny] > 0)
			continue;
		if (check[nx][ny] == 0 && abs(arr[x][y] - arr[nx][ny]) >= L && abs(arr[x][y] - arr[nx][ny]) <= R) {
			check[nx][ny] = cnt;
			info.push_back({ nx, ny, arr[nx][ny] });
			sum += arr[nx][ny];
			checkUnion(nx, ny, cnt);
		}
	}
	return;
}

int main() {
	ios::sync_with_stdio(false);

	cin >> N >> L >> R;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
		}
	}

	int ans = 0;

	while (true) {

		int cnt = 0;
		memset(check, 0, sizeof(check));
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (check[i][j] == 0) {
					sum = 0;
					info.clear();
					cnt++;
					checkUnion(i, j, cnt);
					if (info.size() == 0) {
						cnt--;
						continue;
					}
					int ave = sum / info.size();
					//arr[i][j] = ave;
					for (int k = 0; k < info.size(); k++) {
						arr[info[k].x][info[k].y] = ave;
					}
				}
			}
		}

		// 출력
		/*cout << '\n';
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {

				cout << arr[i][j] << ' ';
			}
			cout << '\n';
		}
*/
		if (cnt == 0)
			break;
		ans++;
	}

	cout << ans << '\n';
	return 0;
}