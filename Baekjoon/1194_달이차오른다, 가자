#include <iostream>
#include <queue>
#include <cstring>
#include <vector>
#include <utility>

using namespace std;

struct Info {
	int x, y, cnt;
	int key[6];
};
int N, M, sx, sy, ans = -1;
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };
char arr[51][51];
int check[51][51][2][2][2][2][2][2];

void solve() {
	queue<Info> q;
	check[sx][sy][0][0][0][0][0][0] = 1;
	Info temp; temp.x = sx; temp.y = sy; temp.cnt = 0; memset(temp.key, 0, sizeof(int) * 6);
	q.push(temp);

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		int key[6] = { 0, };
		memcpy(key, q.front().key, sizeof(int) * 6);
		q.pop();

		// 종료조건
		if (arr[x][y] == '1') {
			ans = cnt;
			break;
		}

		for (int d = 0; d < 4; d++) {
			int nx = x + dx[d];
			int ny = y + dy[d];
			if (nx < 0 || nx >= N || ny < 0 || ny >= M ||arr[nx][ny] == '#' || check[nx][ny][key[0]][key[1]][key[2]][key[3]][key[4]][key[5]] == 1)
				continue;
			// 빈곳 & 출구
			if (arr[nx][ny] == '.' || arr[nx][ny] == '1') {
				check[nx][ny][key[0]][key[1]][key[2]][key[3]][key[4]][key[5]] = 1;
				Info tmp;
				tmp.x = nx; tmp.y = ny; tmp.cnt = cnt + 1; memcpy(tmp.key, key, sizeof(key));
				q.push(tmp);
			}

			// 열쇠
			if (arr[nx][ny] >= 'a' && arr[nx][ny] <= 'f') {
				check[nx][ny][key[0]][key[1]][key[2]][key[3]][key[4]][key[5]] = 1;
				Info tmp;
				tmp.x = nx; tmp.y = ny; tmp.cnt = cnt + 1; memcpy(tmp.key, key, sizeof(key));
				tmp.key[arr[nx][ny] - 'a'] = 1;
				q.push(tmp);
				check[nx][ny][tmp.key[0]][tmp.key[1]][tmp.key[2]][tmp.key[3]][tmp.key[4]][tmp.key[5]] = 1;
			}
			// 문
			if (arr[nx][ny] >= 'A' && arr[nx][ny] <= 'F') {
				if (key[arr[nx][ny] - 'A'] == 1) {
					check[nx][ny][key[0]][key[1]][key[2]][key[3]][key[4]][key[5]] = 1;
					Info tmp;
					tmp.x = nx; tmp.y = ny; tmp.cnt = cnt + 1; memcpy(tmp.key, key, sizeof(key));
					q.push(tmp);
				}
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);

	cin >> N >> M;
	
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == '0') {
				arr[i][j] = '.';
				sx = i; sy = j;
			}
		}
	}

	solve();
	
	cout << ans << '\n';
	
	return 0;
}