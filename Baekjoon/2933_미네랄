// https://www.acmicpc.net/problem/2933
// 2933_미네랄

#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>

using namespace std;

int R, C, N, cnt;
char arr[101][101];
int check[101][101];
vector<int> turn, stay;
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };
bool flag;

int fromLeft(int x) {
	for (int i = 1; i <= C; i++) {
		if (arr[x][i] == 'x') {
			arr[x][i] = '.';
			return i;
		}
	}
	return -1;
}

int fromRight(int x) {
	for (int i = C; i >= 1; i--) {
		if (arr[x][i] == 'x') {
			arr[x][i] = '.';
			return i;
		}
	}
	return -1;
}

void dfs(int x, int y, int c) {
	check[x][y] = c;
	for (int d = 0; d < 4; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 1 || nx > R || ny < 1 || ny > C || check[nx][ny] != 0)
			continue;
		if (check[nx][ny] == 0 && arr[nx][ny] == 'x') {
			if (nx == 1)
				flag = true;
			dfs(nx, ny, cnt);
		}
	}
}

void move(int c) {
	int  mmin = 1000;
	for (int i = 1; i <= C; i++) {
		for (int j = 1; j <= R; j++) {
			if (check[j][i] == c && arr[j][i] == 'x') {
				int cc = 0;
				for (int k = j - 1; k >= 1; k--) {
					if (arr[k][i] == '.') cc++;
					else break;
				}
				mmin = min(mmin, cc);
				break;
			}
		}
	}

	for (int i = 1; i <= C; i++) {
		for (int j = 1; j <= R; j++) {
			if (check[j][i] == c && arr[j][i] == 'x') {
				check[j][i] = 0;
				arr[j][i] = '.';
				arr[j - mmin][i] = 'x';
				check[j - mmin][i] = c;
			}
		}
	}
}

void cluster(int x, int y) {
	cnt = 1;
	memset(check, 0, sizeof(check));
	for (int d = 0; d < 4; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 1 || nx > R || ny < 1 || ny > C || arr[nx][ny] == '.' || check[nx][ny] != 0)
			continue;
		if (arr[nx][ny] == 'x' && check[nx][ny] == 0) {
			flag = false;
			dfs(nx, ny, cnt);
			if (flag  == false) {
				move(cnt);
				break;
			}
			cnt++;
		}
	}
}

int main() {
	ios::sync_with_stdio(false);

	cin >> R >> C;
	for (int i = R; i >= 1; i--) {
		for (int j = 1; j <= C; j++) {
			cin >> arr[i][j];
		}
	}
	
	cin >> N;
	for (int i = 0; i < N; i++) {
		int a;
		cin >> a;
		turn.push_back(a);
	}
	
	for (int i = 0; i < N; i++) {
		int y;
		if (i % 2 == 0) {
			y = fromLeft(turn[i]);
		}
		else {
			y = fromRight(turn[i]);
		}
		if(y != -1)
			cluster(turn[i], y);
	}

	for (int i = R; i >= 1; i--) {
		for (int j = 1; j <= C; j++) {
			cout << arr[i][j];
		}
		cout << '\n';
	}

	return 0;
}