#include <iostream>
#include <queue>

using namespace std;

struct Info {
	int x, y, cnt;
};

int R, C, sx, sy, ans;
char arr[51][51];
int check[51][51];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };
queue<Info> fire, jisup;

void bfs() {
	check[sx][sy] = 1;
	jisup.push({ sx, sy, 0 });
	int stop = 0;
	bool flag = false;
	while (!flag) {
		if (jisup.empty())
			break;
		while (!fire.empty()) {
			int x = fire.front().x;
			int y = fire.front().y;
			int cnt = fire.front().cnt;
			if (stop != cnt) {
				break;
			}
			fire.pop();

			for (int d = 0; d < 4; d++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 0 || nx >= R || ny < 0 || ny >= C || arr[nx][ny] == 'D' || arr[nx][ny] == 'X')
					continue;
				if (arr[nx][ny] == '.') {
					arr[nx][ny] = '*';
					fire.push({ nx, ny, cnt + 1 });
				}
			}
		}

		while (!jisup.empty()) {
			int x = jisup.front().x;
			int y = jisup.front().y;
			int cnt = jisup.front().cnt;
			if (cnt != stop) {
				stop++;
				break;
			}
			jisup.pop();

			if (arr[x][y] == 'D') {
				ans = cnt;
				flag = true;
				break;
			}

			for (int d = 0; d < 4; d++) {
				int nx = x + dx[d];
				int ny = y + dy[d];
				if (nx < 0 || nx >= R || ny < 0 || ny >= C || arr[nx][ny] == '*' || arr[nx][ny] == 'X' || check[nx][ny] == 1)
					continue;
				if (arr[nx][ny] == '.' || arr[nx][ny] == 'D') {
					check[nx][ny] = 1;
					jisup.push({ nx, ny, cnt + 1 });
				}
			}
		}
	}
	if (!flag)
		ans = -1;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> R >> C;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 'S') {
				arr[i][j] = '.';
				sx = i;
				sy = j;
			}
			else if (arr[i][j] == '*') {
				fire.push({ i, j, 0 });
			}
		}
	}
	bfs();
	if (ans == -1)
		cout << "KAKTUS\n";
	else
		cout << ans << '\n';
	
	return 0;
}