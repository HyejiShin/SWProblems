// https://www.acmicpc.net/problem/2206
// 2206_벽 부수고 이동하기

#include <iostream>
#include <queue>

using namespace std;

int N, M, ans = -1;
char arr[1001][1001];
int visit[1001][1001][2];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

struct Info {
	int x, y, cnt, check;
};

void bfs() {
	queue<Info> q;
	visit[1][1][0] = 1;
	q.push({1, 1, 1, 0});
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		int check = q.front().check;
		q.pop();
		//cout << "q : " << x << ' ' << y << '\n';
		//종료 조건
		if (x == N && y == M) {
			ans = cnt;
			break;
		}

		for (int d = 0; d < 4; d++) {
			int nx = x + dx[d];
			int ny = y + dy[d];
			if (nx < 1 || nx > N || ny < 1 || ny > M || visit[nx][ny][check] == 1)
				continue;
			if (arr[nx][ny] == '0') {
				visit[nx][ny][check] = 1;
				q.push({ nx, ny, cnt + 1, check });
			}
			else if (check == 1 && arr[nx][ny] == '1')
				continue;
			else if (check == 0 && arr[nx][ny] == '1') {
				visit[nx][ny][1] = 1;
				q.push({ nx, ny, cnt + 1, 1 });
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);

	cin >> N >> M;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> arr[i][j];
		}
	}

	bfs();

	cout << ans << '\n';
	return 0;
}