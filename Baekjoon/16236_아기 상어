#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

struct Info {
	int d, x, y;
};

struct info {
	int x, y, cnt;
};

bool operator<(Info a, Info b) {
	if (a.d == b.d) {
		if (a.x == b.x)
			return a.y > b.y;
		return a.x > b.x;
	}
	return a.d > b.d;
}

int N, sx, sy, s, eat;
int arr[21][21], check[21][21];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

int bfs(int ex, int ey) {
	queue<info> q;
	q.push({ sx, sy, 0 });
	check[sx][sy] = 1;
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		q.pop();

		if (x == ex && y == ey) {
			return cnt;
		}
		for (int d = 0; d < 4; d++) {
			int nx = x + dx[d];
			int ny = y + dy[d];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] > s || check[nx][ny] == 1)
				continue;
			if (arr[nx][ny] >= 0 && arr[nx][ny] <= s) {
				check[nx][ny] = 1;
				q.push({ nx, ny, cnt + 1 });
			}
		}
	}
	return 0;
}

int main() {
	ios::sync_with_stdio(false);

	cin >> N;
	s = 2; eat = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 9) {
				arr[i][j] = 0;
				sx = i;
				sy = j;
			}
		}
	}

	int time = 0;

	while (1) {
		//cout << "while in\n";
		priority_queue<Info> pq;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (arr[i][j] >= 1 && arr[i][j] < s) {
					memset(check, 0, sizeof(int) * 21 * 21);
					int d = bfs(i, j);
					if(d > 0)
						pq.push({ d, i, j });
				}
			}
		}
		if (pq.size() == 0) {
			break;
		}
		Info fish = pq.top();
		sx = fish.x;
		sy = fish.y;
		arr[sx][sy] = 0;
		eat++;
		time += fish.d;
		if (s == eat) {
			eat = 0;
			s++;
		}
	}

	cout << time << '\n';
	return 0;
}