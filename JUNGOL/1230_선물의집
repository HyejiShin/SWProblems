#include <iostream>
#include <algorithm>

using namespace std;

int N, mmax;
int arr[11][11], check[11][11];
int dx[4] = { 0, 1, 0, -1 }, dy[4] = { 1, 0, -1, 0 };

void solve(int x, int y, int cnt) {
	//cout << "check in" << '\n';
	if (x == N - 1 && y == N - 1) {
		mmax = max(mmax, cnt);
		//cout << x << ' ' << y << '\n';
		return;
	}
	
	for (int d = 0; d < 4; d++) {
		int nx = x + dx[d];
		int ny = y + dy[d];
		if (nx < 0 || nx >= N || ny < 0 || ny >= N || check[nx][ny] == 1|| arr[nx][ny]==1)
			continue;
		if (check[nx][ny] == 0) {
			check[nx][ny] = 1;
			if (arr[nx][ny] == 0) {
				solve(nx, ny, cnt);
			}
			else if (arr[nx][ny] == 2) {
				solve(nx, ny, cnt + 1);
			}
			check[nx][ny] = 0;
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
		}
	}

	check[0][0] = 1;
	if (arr[0][0] == 2) {
		solve(0, 0, 1);
	}
	else if (arr[0][0] == 0) {
		solve(0, 0, 0);
	}
	cout << mmax << '\n';
	return 0;
}